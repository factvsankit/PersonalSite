'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cryptoJs = require('crypto-js');

var _cryptoJs2 = _interopRequireDefault(_cryptoJs);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GravityFormsApi = function () {
  function GravityFormsApi(apiCreds) {
    _classCallCheck(this, GravityFormsApi);

    var isValid = function isValid(options) {
      return options.apiKey && options.domain && options.privateKey;
    };

    if (isValid(apiCreds)) {
      this._setup(apiCreds);
    } else {
      this._throwError('Invalid api credentials');
    }
  }

  _createClass(GravityFormsApi, [{
    key: '_setup',
    value: function _setup(options) {
      var apiKey = options.apiKey;
      var domain = options.domain;
      var privateKey = options.privateKey;


      this.apiKey = apiKey;
      this.privateKey = privateKey;
      this.baseEndPoint = domain + '/gravityformsapi';
    }
  }, {
    key: '_convertToFutureUnixTime',
    value: function _convertToFutureUnixTime(expirationInSeconds) {
      var currentDate = new Date();
      var unixTimeInSeconds = parseInt(currentDate.getTime() / 1000, 10);

      return unixTimeInSeconds + expirationInSeconds;
    }
  }, {
    key: '_throwError',
    value: function _throwError(desc) {
      throw new Error(desc);
    }
  }, {
    key: 'createSignature',
    value: function createSignature(method, route) {
      var expirationInSeconds = arguments.length <= 2 || arguments[2] === undefined ? 600 : arguments[2];

      if (!method || !route) {
        this._throwError('GravityFormsApi.createSignature is Missing required arguments');
      }

      var futureUnixTime = this._convertToFutureUnixTime(expirationInSeconds);

      var stringToSign = this.apiKey + ':' + method + ':' + route + ':' + futureUnixTime;

      var hash = _cryptoJs2.default.HmacSHA1(stringToSign, this.privateKey);
      var base64 = hash.toString(_cryptoJs2.default.enc.Base64);

      return encodeURIComponent(base64);
    }
  }, {
    key: 'get',
    value: function get(domain, route, signature) {
      var expirationInSeconds = arguments.length <= 3 || arguments[3] === undefined ? 600 : arguments[3];
      var maxResults = arguments.length <= 4 || arguments[4] === undefined ? 10 : arguments[4];
      var cb = arguments[5];

      if (!domain || !route || !signature) {
        this._throwError('GravityFormsApi.request is Missing required arguments');
      }

      var futureUnixTime = this._convertToFutureUnixTime(expirationInSeconds);
      var uri = this.baseEndPoint + '/' + route + '?api_key=' + this.apiKey + '&signature=' + signature + ('&expires=' + futureUnixTime + '&paging[page_size]=' + maxResults);
      var requestOptions = { uri: uri, json: true };

      return (0, _requestPromise2.default)(requestOptions);
    }
  }]);

  return GravityFormsApi;
}();

exports.GravityFormsApi = GravityFormsApi;